"""
Django settings for systemmarimar project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

# Configuracion para despliegue en render.com y railway.app
import dj_database_url

from pathlib import Path
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
#BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = 'django-insecure-7$luh7@r^ep9q%vs4iw1swd1h27=4$e=8z1kfveuk-nt*at$0f'

# Configuracion para despliegue en render.com
#SECRET_KEY = os.environ.get('SECRET_KEY', 'dev-secret-key')

# Configuracion para despliegue en railway.app
#SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-7$luh7@r^ep9q%vs4iw1swd1h27=4$e=8z1kfveuk-nt*at$0f')

# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = True

# Configuracion para despliegue en render.com
#DEBUG = os.environ.get('DEBUG', 'False') == 'True'


#ALLOWED_HOSTS = ['systemmarimar.onrender.com','proyectoii2025.onrender.com','127.0.0.1']

# Configuracion para despliegue en railway.app
#ALLOWED_HOSTS = ['*']



# =========================
# 游댏 Seguridad
# =========================
SECRET_KEY = os.environ.get("SECRET_KEY")  # definido en Railway
DEBUG = os.environ.get("DEBUG", "False").lower() == "true"
ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", "127.0.0.1,localhost").split(",")


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'crispy_forms',
    'crispy_bootstrap5',
    'apps.ventas',
    'apps.compras',
    'apps.inventarios',
    'apps.administrador',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'systemmarimar.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],  # Configuracion para el despliegue en render.com
        #'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                #'inventarios.context_processors.api_stock_bajo'
            ],
        },
    },
]

#Se agregar porque vamos a personalizar usuario no vamos a usar lo que ofrece DJANGO
#AUTH_USER_MODEL = 'control_panel.Usuario'
WSGI_APPLICATION = 'systemmarimar.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases



# Configuracion para despliegue en render.com
DATABASES = {
    'default': dj_database_url.config(
        default=os.environ.get("DATABASE_URL"),
        conn_max_age=600,
        conn_health_checks=True
        #ssl_require=True
    )
}




# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

#LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'es'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = False
#True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

#STATIC_URL = 'static/'


STATIC_URL = '/static/'

# Donde se guardar치n los archivos collectstatic (para producci칩n)
#STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_ROOT = BASE_DIR / "staticfiles"

# En desarrollo, d칩nde buscar archivos est치ticos adem치s de los apps
#STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'),]

STATICFILES_DIRS = [BASE_DIR / "static"]

# WhiteNoise configuration para Railway
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

################################################ CRISPY FORMS ##########################
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"


#https://medium.com/@techworldthink/how-to-add-static-files-in-django-a-quick-guide-b22762d10236
#Collect Static Files for Production
#python manage.py collectstatic

#https://fontawesome.com/v5/icons/tasks?s=solid